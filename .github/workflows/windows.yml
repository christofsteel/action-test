# This is a basic workflow to help you get started with Actions

name: Build under windows

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job    
    steps:
      - name: create workdor
        run: mkdir work
        shell: bash
        
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          repository: christofsteel/syng      

      - name: Download and extract latest MPV
        run: |
          Invoke-WebRequest -Uri https://nightly.link/mpv-player/mpv/workflows/build/master/mpv-x86_64-windows-msvc.zip -OutFile mpv-x86_64-windows-msvc.zip          
          Expand-Archive -Path mpv-x86_64-windows-msvc.zip -DestinationPath .

      - name: Install 7-Zip
        run: choco install -y 7zip
          
      - name: Download and extract latest FFMPEG
        run: |
          Invoke-WebRequest -Uri https://www.gyan.dev/ffmpeg/builds/packages/ffmpeg-7.1-full_build.7z -OutFile ffmpeg-release-full.7z
          7z x ffmpeg-release-full.7z

      - name: Populate workdir
        run: |
          Copy-Item -Verbose requirements-client.txt work/requirements.txt
          Copy-Item -Verbose resources/icons/syng.ico work/
          Copy-Item -Verbose mpv.exe work/
          Copy-Item -Verbose vulkan-1.dll work/
          Copy-Item -Verbose ffmpeg-7.1-full_build/bin/ffmpeg.exe work/
          

      - name: List all files
        run: Get-ChildItem -Recurse -Path work
        shell: pwsh          

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: 3.12
          
      - name: Install poetry
        run: pip install poetry
        
      - name: Extract version from Poetry
        id: get_version
        run: echo "VERSION=$(poetry version -s)" >> $GITHUB_ENV
        shell: bash        

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Bundle Syng
        run: pyinstaller -n "syng-${{ env.VERSION }}" -F -w -i'.\syng.ico' --add-data='.\syng.ico;.' --add-binary '.\mpv.exe;.' --add-binary '.\vulkan-1.dll;.' --add-binary '.\ffmpeg.exe;.' syng/main.py                              
        working-directory: ./work

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Syng Version ${{ env.VERSION }}
          path: work/dist/syng-${{ env.VERSION }}.exe          
